C51 COMPILER V9.60.7.0   CALCULATE                                                         05/23/2024 21:57:01 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE CALCULATE
OBJECT MODULE PLACED IN .\Objects\calculate.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE calculate.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Li
                    -stings\calculate.lst) TABS(2) OBJECT(.\Objects\calculate.obj)

line level    source

   1          //#include "calculate.h"
   2          #include <string.h>
   3          #define maxn 12
   4          
   5          unsigned char infixList[maxn][3];
   6          unsigned char suffix[maxn][3];
   7          int p = 0;
   8          char tmp[maxn];
   9          unsigned char p1 = 0;
  10          unsigned char ii=0,j=0;
  11          int infixNum;
  12          unsigned char tot = 0, n;
  13          //把字符串根据操作数、运算符、括号拆开，存储到infixList数组中
  14          int toInfixExpression(char *s)
  15          {
  16   1          tot = 0;
  17   1          n = strlen(s);
  18   1          for (ii = 0; ii < n; ii++) {
  19   2              if (s[ii] >= '0' && s[ii] <= '9') {
  20   3                  p               = 0;
  21   3                  infixList[tot][p++] = s[ii];
  22   3                  while (ii + 1 < n && s[ii + 1] >= '0' && s[ii + 1] <= '9') {
  23   4                      infixList[tot][p++] = s[++ii];
  24   4                  }
  25   3                  tot++;
  26   3              } else {
  27   3                  infixList[tot++][0] = s[ii];
  28   3              }
  29   2          }
  30   1          return tot;
  31   1      }
  32          
  33           //获得优先级
  34          int getPriority(char c)
  35          {
  36   1          if (c == 13 || c == 14)
  37   1              return 1;
  38   1          else if (c == 15 || c == 16)
  39   1              return 2;
  40   1          else
  41   1              return 0; // 处理'('的情况
  42   1      }
  43          
  44           //转换成后缀表达式
  45           void parseSuffixExpression(char s[][10], int n)
  46           {
  47   1      
  48   1           for (ii = 0; ii < n; ii++) {
  49   2               if (s[ii][0] >= '0' && s[ii][0] <= '9') {
  50   3                   strcpy(suffix[p++], s[ii]);
  51   3               } else if (s[ii][0] == 11) {
  52   3                   tmp[p1++] = s[ii][0];
  53   3               } else if (s[ii][0] == 12) {
  54   3                   while (tmp[p1 - 1] != 11) {
C51 COMPILER V9.60.7.0   CALCULATE                                                         05/23/2024 21:57:01 PAGE 2   

  55   4                       suffix[p++][0] = tmp[--p1];
  56   4                   }
  57   3                   p1--;
  58   3               } else {
  59   3                   while (p1 != 0 && getPriority(tmp[p1 - 1]) >= getPriority(s[ii][0])) {
  60   4                       suffix[p++][0] = tmp[--p1];
  61   4                   }
  62   3                   tmp[p1++] = s[ii][0];
  63   3               }
  64   2           }
  65   1           while (p1 != 0) {
  66   2               suffix[p++][0] = tmp[--p1];
  67   2           }
  68   1       }
  69          int k;
  70          int ans = 0;
  71          // 计算一个以字符串形式存储的数的值
  72          int parseInt(char *s)
  73          {
  74   1            k= strlen(s);
  75   1           ans = 0;
  76   1          for (ii = 0; ii < k; ii++) {
  77   2              ans = ans * 10 + (s[ii] - '0');
  78   2          }
  79   1          return ans;
  80   1      }
  81          
  82          char b[11];
  83          int point = 0;
  84          // 将数k转化成字符串形式存储到指针s开始的地方
  85          void parseString(char *s, int k)
  86          {
  87   1          point = 0;
  88   1          do {
  89   2              b[point++] = (char)('0' + k % 10);
  90   2              k /= 10;
  91   2          } while (k != 0);
  92   1          for (ii = point - 1, j = 0; ii >= 0; ii--, j++) {
  93   2              *(s + j) = b[ii];
  94   2          }
  95   1          *(s + point) = '\0';
  96   1      }
  97          char t[maxn][5];
  98          int m = 1;
  99          int k;
 100          // 计算后缀表达式的值
 101          int calculate()
 102          {
 103   1          point = 0;
 104   1          for (ii = 0; ii < p; ii++) {
 105   2              k = strlen(suffix[ii]);
 106   2              if (suffix[ii][0] >= '0' && suffix[ii][0] <= '9') {
 107   3                  strcpy(t[point++], suffix[ii]);
 108   3                  t[point - 1][k] = '\0';
 109   3              } else {
 110   3                  int b   = parseInt(t[--point]);
 111   3                  int a   = parseInt(t[--point]);
 112   3                  int res = 0;
 113   3                  if (suffix[ii][0] == 13) {
 114   4                      res = a + b;
 115   4                      // printf("(%d) %d + %d = %d\n", m++, a, b, res);
 116   4                  } else if (suffix[ii][0] == 14) {
C51 COMPILER V9.60.7.0   CALCULATE                                                         05/23/2024 21:57:01 PAGE 3   

 117   4                      res = a - b;
 118   4                      // printf("(%d) %d - %d = %d\n", m++, a, b, res);
 119   4                  } else if (suffix[ii][0] == 15) {
 120   4                      res = a * b;
 121   4                      // printf("(%d) %d * %d = %d\n", m++, a, b, res);
 122   4                  } else if (suffix[ii][0] == 16) {
 123   4                      if (b == 0) {
 124   5                          // printf("除数为零出错！！！\n");
 125   5                          return -1;
 126   5                      }
 127   4                      res = a / b;
 128   4                      // printf("(%d) %d / %d = %d\n", m++, a, b, res);
 129   4                  }
 130   3                  parseString(t[point], res);
 131   3                  point++;
 132   3              }
 133   2          }
 134   1          return parseInt(t[0]);
 135   1      }
 136          
 137           int ans_calculate(char *s)
 138           {
 139   1           // 输入字符串
 140   1           p = p1 = 0;
 141   1           // printf("------------------------------\n");
 142   1           // printf("请输入待计算的表达式:");
 143   1           // scanf("%s", s);
 144   1           infixNum = toInfixExpression(s);
 145   1           parseSuffixExpression(infixList, infixNum);
 146   1      
 147   1           // printf("运算过程如下所示：\n");
 148   1           // int ans = calculate();
 149   1           // printf("运算结果为: %d\n", ans);
 150   1           // printf("------------------------------\n");
 151   1           // printf("请选择是否继续(输入0表示退出,否则继续):");
 152   1           return calculate();
 153   1           // printf("\n");
 154   1       }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1671    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    172      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
