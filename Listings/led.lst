C51 COMPILER V9.60.7.0   LED                                                               05/23/2024 21:57:32 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LED
OBJECT MODULE PLACED IN .\Objects\led.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE led.c LARGE OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings
                    -\led.lst) TABS(2) OBJECT(.\Objects\led.obj)

line level    source

   1          #include <rtx51tny.h>
   2          #include <reg52.h>
   3          #include <string.h>
   4          #include "Key.h"
   5          #include "calculate.h"
   6          #define Independent_button_1 21 // 独立按键1   模式切换
   7          #define Independent_button_2 22 // 独立按键2   位数切换
   8          #define Independent_button_3 23 // 独立按键3    清零
   9          #define Independent_button_4 24 // 独立按键4    计算
  10          // 0-9 无显示 11左12右括号13加14减15乘16除
  11          code unsigned char NT[] = {0x08, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x3F, 0x39, 0x0f, 0
             -x70, 0x40, 0x80, 0x46};
  12          #define Length 24
  13          unsigned char show_length       = 20;  // 显示长度
  14          int show_mode                   = -1; // 显示模式，0是正常显示模式，1是修改模式  -1是输入模式
  15          unsigned char Scintillation_bit = 0;  // 闪烁位
  16          bit Scintillation_flag          = 0;  // 0表示闪烁位灭，1表示闪烁位亮
  17          int answer;
  18          // unsigned char Number[Length] = {10, 11, 12, 13, 14, 15, 16, 7, 8, 9, 1, 1, 2, 3, 4, 5,0,0,0,0,0,0,0,0};
  19          unsigned char Number[Length] = {1, 2, 3, 15,11, 4, 2, 5, 14, 6, 2, 8, 16, 3, 2, 12, 14, 7, 8, 4};
  20          // 123*(425-628/32)-784
  21          sbit P2_2             = P2 ^ 2;
  22          sbit P2_3             = P2 ^ 3;
  23          sbit P2_4             = P2 ^ 4;
  24          unsigned char Location = 0; // 显示位置
  25          unsigned char Offset   = 0; // 偏移量
  26          unsigned char KeyNum;      // 按下的按键
  27          
  28          void display(void) _task_ 0
  29          {
  30   1          os_create_task(1);
  31   1          os_create_task(2);
  32   1          os_create_task(3);
  33   1          while (1) {
  34   2              P0 = 0x00;
  35   2              switch(Location)
  36   2        {
  37   3          case 0:P2_4=1;P2_3=1;P2_2=1;break;
  38   3          case 1:P2_4=1;P2_3=1;P2_2=0;break;
  39   3          case 2:P2_4=1;P2_3=0;P2_2=1;break;
  40   3          case 3:P2_4=1;P2_3=0;P2_2=0;break;
  41   3          case 4:P2_4=0;P2_3=1;P2_2=1;break;
  42   3          case 5:P2_4=0;P2_3=1;P2_2=0;break;
  43   3          case 6:P2_4=0;P2_3=0;P2_2=1;break;
  44   3          case 7:P2_4=0;P2_3=0;P2_2=0;break;
  45   3        }
  46   2              if (!show_mode)
  47   2                  P0 = NT[Number[Location + Offset]];
  48   2              else if (show_mode) {
  49   3                  if (Scintillation_bit != Location)
  50   3                      P0 = NT[Number[Location + Offset]];
  51   3                  else
  52   3                      P0 = Scintillation_flag ? 0x00 : NT[Number[Location + Offset]];
  53   3              } else if (show_mode == -1) {
C51 COMPILER V9.60.7.0   LED                                                               05/23/2024 21:57:32 PAGE 2   

  54   3                  P0 = NT[Number[Location]];
  55   3              } else {
  56   3              }
  57   2              Location++;
  58   2              Location = Location % 8;
  59   2              os_wait2(K_TMO, 1);
  60   2          }
  61   1      }
  62          int i = 0;
  63          void show_mode_change(void) _task_ 1
  64          {
  65   1          while (1) {
  66   2              if (show_mode == 0) // 显示模式，每次刷新8个位置
  67   2              {
  68   3                  if (show_length >= 8) {
  69   4                      Offset += 1;
  70   4                      Offset %= (show_length - 7);
  71   4                  }
  72   3                  for (i = 0; i <= 3; i++)
  73   3                      os_wait2(K_TMO, 700);
  74   3              } else if (show_mode == 1 || show_mode == -1) // 修改模式，每次翻转当前位数码管
  75   2              {
  76   3                  Scintillation_flag = !Scintillation_flag;
  77   3                  for (i = 0; i <= 2; i++)
  78   3                      os_wait2(K_TMO, 430);
  79   3              }
  80   2          }
  81   1      }
  82          
  83          void Task_3(void) _task_ 3
  84          {
  85   1      
  86   1          while (1) {
  87   2              Key_Loop();
  88   2              os_wait2(K_TMO, 70);
  89   2          }
  90   1      }
  91          int count = 0;
  92          void Task_2(void) _task_ 2
  93          {
  94   1          while (1) {
  95   2              KeyNum = Key();
  96   2              if (KeyNum) {
  97   3                  if (KeyNum == Independent_button_1) { // 独立按键1
  98   4                      if (show_mode == -1) {
  99   5                          show_mode         = 0;
 100   5                          Scintillation_bit = 0;
 101   5                          Offset            = 0;
 102   5                      } else if (show_mode == 0 || show_mode == 1) {
 103   5                          show_mode         = !show_mode;
 104   5                          Scintillation_bit = 0;
 105   5                          Offset            = 0;
 106   5                          show_length       = 1;
 107   5                      }
 108   4                  } else if (KeyNum == Independent_button_2) { // 独立按键2
 109   4                      if (show_mode == 1) {
 110   5                          Scintillation_bit++;
 111   5                          if (Scintillation_bit > 8) {
 112   6                              Scintillation_bit = 8;
 113   6                              Offset++;
 114   6                          }
 115   5                      }
C51 COMPILER V9.60.7.0   LED                                                               05/23/2024 21:57:32 PAGE 3   

 116   4                  } else if (KeyNum == Independent_button_3) { // 独立按键3
 117   4                      show_mode = -1;
 118   4                      for (count = 0; count < Length; count++) {
 119   5                          Number[count] = 0;
 120   5                      }
 121   4                      Offset            = 0;
 122   4                      Scintillation_bit = 0;
 123   4                  } else if (KeyNum == Independent_button_4) { // 独立按键4
 124   4                                                               // 计算
 125   4      //                    answer=ans_calculate(Number);
 126   4      //                    for(count=0;count<Length;count++)
 127   4      //                    {
 128   4      //                        Number[count]=0;
 129   4      //                    }
 130   4      //                    count=0;
 131   4      //                    while (answer)
 132   4      //                    {
 133   4      //                        Number[count] = answer % 10;
 134   4      //                        answer /= 10;
 135   4      //                        count++;
 136   4      //                    }                   
 137   4                  } else if (KeyNum <= 16) {
 138   4                      if (show_mode == 1) {
 139   5                          Number[Scintillation_bit + Offset] = KeyNum;
 140   5                      } else if (show_mode == -1) {
 141   5                          Number[Scintillation_bit + Offset] = KeyNum;
 142   5                          Scintillation_bit++;
 143   5                          show_length++;
 144   5                          if (Scintillation_bit > 8) {
 145   6                              Scintillation_bit = 8;
 146   6                              Offset++;
 147   6                          }
 148   5                      }
 149   4                  }
 150   3              }
 151   2              os_wait2(K_TMO, 10);
 152   2          }
 153   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    748    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =     37    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
